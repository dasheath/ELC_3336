
MotionLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070b  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c3  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  000016d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  88:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize>:
}

void initialize( void ) {
	
	// Setup PD2
	TIMSK0 |= (1<<TOIE0);		// Enable timer0 overflow interrupt
  90:	ee e6       	ldi	r30, 0x6E	; 110
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 60       	ori	r24, 0x01	; 1
  98:	80 83       	st	Z, r24
	EIMSK |= 1<<INT0;			// Enable INT0 interrupt flag
  9a:	e8 9a       	sbi	0x1d, 0	; 29
	DDRD &= ~(1<<DDD2);			// Set PD2 to input
  9c:	52 98       	cbi	0x0a, 2	; 10
	MCUCR = (1<<ISC01) | (1<<ISC00);	// Trigger INT0 on rising edge
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	85 bf       	out	0x35, r24	; 53
	
	// Setup on Board Button and LED
	DDRB &= ~(1<<7);		// Make Button an input
  a2:	27 98       	cbi	0x04, 7	; 4
	DDRB |= (1<<5);			// Make on board LED output	
  a4:	25 9a       	sbi	0x04, 5	; 4
	DDRC |= (1<<3);		// PC3 - LED - output
  a6:	3b 9a       	sbi	0x07, 3	; 7
	PORTC |= (1<<3);	// PC3 = 1 --> LED off
  a8:	43 9a       	sbi	0x08, 3	; 8
	
	
	TCCR0A = 0x00;			// Clock in normal mode
  aa:	14 bc       	out	0x24, r1	; 36
  ac:	08 95       	ret

000000ae <__vector_1>:
}

ISR( INT0_vect )  {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	PORTB |= (1<<5);	// turn light on (on board LED)
  ba:	2d 9a       	sbi	0x05, 5	; 5
	PORTC &= ~(1<<3);	// Turn on external LED
  bc:	43 98       	cbi	0x08, 3	; 8
	DDRC |= (1<<3);		// Make PC3 an output again
  be:	3b 9a       	sbi	0x07, 3	; 7
	
	TCCR0B = (1<<CS02) | (1<<CS00);		// Turn on clock with 1/1024 prescaling
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;							// Set counter to 0
  c4:	16 bc       	out	0x26, r1	; 38
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <button>:
		button();
	}
}

void button(void) {
	PORTB &= ~(1<<5);	// turn off light
  d2:	2d 98       	cbi	0x05, 5	; 5
	PORTC |= (1<<3);	// PC3 = 1 --> LED off
  d4:	43 9a       	sbi	0x08, 3	; 8
	DDRC &= ~(1<<3);	// Make PC3 an input
  d6:	3b 98       	cbi	0x07, 3	; 7
	
	TCCR0B = 0x00;		// Turn off clock
  d8:	15 bc       	out	0x25, r1	; 37
	counter = 0;		// Reset counter
  da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	TCNT0 = 0;			// Reset counter register
  e2:	16 bc       	out	0x26, r1	; 38
  e4:	08 95       	ret

000000e6 <main>:
void initialize( void );
void button( void );

int main(void)
{
	initialize();
  e6:	0e 94 48 00 	call	0x90	; 0x90 <initialize>
	sei();							// enable global interrupts
  ea:	78 94       	sei
	
    while (1) {
		if( !(PINB & (1<<7)) )  {
  ec:	1f 99       	sbic	0x03, 7	; 3
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x6>
			button();
  f0:	0e 94 69 00 	call	0xd2	; 0xd2 <button>
  f4:	fb cf       	rjmp	.-10     	; 0xec <main+0x6>

000000f6 <__vector_16>:
	
	TCCR0B = (1<<CS02) | (1<<CS00);		// Turn on clock with 1/1024 prescaling
	TCNT0 = 0;							// Set counter to 0
}

ISR( TIMER0_OVF_vect )  {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	
	TCNT0 = 0;
 118:	16 bc       	out	0x26, r1	; 38
	counter++;
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	// Call button function after 45 seconds ( >= 2746 )
	// >= 306 for 5 seconds
	if(counter >= 306){
 12c:	82 33       	cpi	r24, 0x32	; 50
 12e:	91 40       	sbci	r25, 0x01	; 1
 130:	10 f0       	brcs	.+4      	; 0x136 <__vector_16+0x40>
		button();
 132:	0e 94 69 00 	call	0xd2	; 0xd2 <button>
	}
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
